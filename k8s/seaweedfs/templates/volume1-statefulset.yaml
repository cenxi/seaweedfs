{{- if .Values.volume1.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "seaweedfs.name" . }}-volume1
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "seaweedfs.name" . }}
    chart: {{ template "seaweedfs.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "seaweedfs.name" . }}-volume1
  replicas: {{ .Values.volume1.replicas }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: {{ template "seaweedfs.name" . }}
      chart: {{ template "seaweedfs.chart" . }}
      release: {{ .Release.Name }}
      component: volume1
  template:
    metadata:
      labels:
        app: {{ template "seaweedfs.name" . }}
        chart: {{ template "seaweedfs.chart" . }}
        release: {{ .Release.Name }}
        component: volume1
    spec:
      {{- if .Values.volume1.affinity }}
      affinity:
        {{ tpl .Values.volume1.affinity . | nindent 8 | trim }}
      {{- end }}
      restartPolicy: {{ default .Values.global.restartPolicy .Values.volume1.restartPolicy }}
      {{- if .Values.volume1.tolerations }}
      tolerations:
      {{ tpl .Values.volume1.tolerations . | nindent 8 | trim }}
      {{- end }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecrets }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.volume1.priorityClassName }}
      priorityClassName: {{ .Values.volume1.priorityClassName | quote }}
      {{- end }}
      enableServiceLinks: false
      {{- if .Values.volume1.dir_idx }}
      initContainers:
        - name: seaweedfs-vol-move-idx
          image: {{ template "volume.image" . }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default "IfNotPresent" }}
          command: [ '/bin/sh', '-c' ]
          args: ['if ls {{ .Values.volume1.dir }}/*.idx >/dev/null 2>&1; then mv {{ .Values.volume1.dir }}/*.idx {{ .Values.volume1.dir_idx }}/; fi;']
          volumeMounts:
          - name: idx
            mountPath: {{ .Values.volume1.dir_idx }}
          - name: data
            mountPath: {{ .Values.volume1.dir }}
      {{- end }}
      containers:
        - name: seaweedfs
          image: {{ template "volume.image" . }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.global.imagePullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SEAWEEDFS_FULLNAME
              value: "{{ template "seaweedfs.name" . }}"
            {{- if .Values.global.extraEnvironmentVars }}
            {{- range $key, $value := .Values.global.extraEnvironmentVars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
              exec /usr/bin/weed -logdir=/logs \
                {{- if .Values.volume1.loggingOverrideLevel }}
                -v={{ .Values.volume1.loggingOverrideLevel }} \
                {{- else }}
                -v={{ .Values.global.loggingLevel }} \
                {{- end }}
                volume \
                -port={{ .Values.volume1.port }} \
                {{- if .Values.volume1.metricsPort }}
                -metricsPort {{ .Values.volume1.metricsPort }} \
                {{- end }}
                -dir={{ .Values.volume1.dir }} \
                {{- if .Values.volume1.dir_idx }}
                -dir.idx={{ .Values.volume1.dir_idx }} \
                {{- end }}
                -max={{ .Values.volume1.maxVolumes }} \
                {{- if .Values.volume1.rack }}
                -rack={{ .Values.volume1.rack }} \
                {{- end }}
                {{- if .Values.volume1.dataCenter }}
                -dataCenter={{ .Values.volume1.dataCenter }} \
                {{- end }}
                -ip.bind={{ .Values.volume1.ipBind }} \
                -readMode={{ .Values.volume1.readMode }} \
                {{- if .Values.volume1.whiteList }}
                -whiteList={{ .Values.volume1.whiteList }} \
                {{- end }}
                {{- if .Values.volume.imagesFixOrientation }}
                -images.fix.orientation \
                {{- end }}
                {{- if .Values.volume1.pulseSeconds }}
                -pulseSeconds={{ .Values.volume1.pulseSeconds }} \
                {{- end }}
                {{- if .Values.volume1.index }}
                -index={{ .Values.volume1.index }} \
                {{- end }}
                {{- if .Values.volume1.fileSizeLimitMB }}
                -fileSizeLimitMB={{ .Values.volume1.fileSizeLimitMB }} \
                {{- end }}
                -minFreeSpacePercent={{ .Values.volume1.minFreeSpacePercent }} \
                -ip=${POD_NAME}.${SEAWEEDFS_FULLNAME}-volume1 \
                -compactionMBps={{ .Values.volume1.compactionMBps }} \
                -mserver={{ range $index := until (.Values.master.replicas | int) }}${SEAWEEDFS_FULLNAME}-master-{{ $index }}.${SEAWEEDFS_FULLNAME}-master:{{ $.Values.master.port }}{{ if lt $index (sub ($.Values.master.replicas | int) 1) }},{{ end }}{{ end }}
          volumeMounts:
            - name: data
              mountPath: "{{ .Values.volume1.dir }}/"
            {{- if .Values.volume1.dir_idx }}
            - name: idx
              mountPath: "{{ .Values.volume1.dir_idx }}/"
            {{- end }}
            - name: logs
              mountPath: "/logs/"
            {{- if .Values.global.enableSecurity }}
            - name: security-config
              readOnly: true
              mountPath: /etc/seaweedfs/security.toml
              subPath: security.toml
            - name: ca-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificates/ca/
            - name: master-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificates/master/
            - name: volume1-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificates/volume1/
            - name: filer-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificates/filer/
            - name: client-cert
              readOnly: true
              mountPath: /usr/local/share/ca-certificates/client/
            {{- end }}
            {{ tpl .Values.volume1.extraVolumeMounts . | nindent 12 | trim }}
          ports:
            - containerPort: {{ .Values.volume1.port }}
              name: swfs-vol
            - containerPort: {{ .Values.volume1.grpcPort }}
              #name: swfs-vol-grpc
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .Values.volume1.port }}
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 90
            successThreshold: 1
            failureThreshold: 100
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.volume1.port }}
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 90
            successThreshold: 1
            failureThreshold: 4
            timeoutSeconds: 30
          {{- if .Values.volume1.resources }}
          resources:
            {{ tpl .Values.volume1.resources . | nindent 12 | trim }}
          {{- end }}
      {{- $hostpath_exists := include "volume.hostpath_exists" . -}}
      {{- if $hostpath_exists }}
      volumes:
        {{- if eq .Values.volume1.data.type "hostPath" }}
        - name: data
          hostPath:
            path: /storage/volume1/object_store/
            type: DirectoryOrCreate
        {{- end }}
        {{- if and (eq .Values.volume1.idx.type "hostPath") .Values.volume1.dir_idx }}
        - name: idx
          hostPath:
            path: /ssd/volume1/seaweedfs-volume-idx/
            type: DirectoryOrCreate
        {{- end }}
        {{- if eq .Values.volume1.logs.type "hostPath" }}
        - name: logs
          hostPath:
            path: /storage/volume1/logs/seaweedfs/volume
            type: DirectoryOrCreate
        {{- end }}
        {{- if .Values.global.enableSecurity }}
        - name: security-config
          configMap:
            name: {{ template "seaweedfs.name" . }}-security-config
        - name: ca-cert
          secret:
            secretName: {{ template "seaweedfs.name" . }}-ca-cert
        - name: master-cert
          secret:
            secretName: {{ template "seaweedfs.name" . }}-master-cert
        - name: volume1-cert
          secret:
            secretName: {{ template "seaweedfs.name" . }}-volume1-cert
        - name: filer-cert
          secret:
            secretName: {{ template "seaweedfs.name" . }}-filer-cert
        - name: client-cert
          secret:
            secretName: {{ template "seaweedfs.name" . }}-client-cert
        {{- end }}
      {{- if .Values.volume1.extraVolumes }}
        {{ tpl .Values.volume1.extraVolumes . | indent 8 | trim }}
      {{- end }}
      {{- end }}
      {{- if .Values.volume1.nodeSelector }}
      nodeSelector:
        {{ tpl .Values.volume1.nodeSelector . | indent 8 | trim }}
      {{- end }}
  {{- $pvc_exists := include "volume.pvc_exists" . -}}
  {{- if $pvc_exists }}
  volumeClaimTemplates:
    {{- if eq .Values.volume1.data.type "persistentVolumeClaim"}}
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.volume1.data.storageClass }}
        resources:
          requests:
            storage: {{ .Values.volume1.data.size }}
    {{- end }}
    {{- if and (eq .Values.volume1.idx.type "persistentVolumeClaim") .Values.volume1.dir_idx }}
    - metadata:
        name: idx
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.volume1.idx.storageClass }}
        resources:
          requests:
            storage: {{ .Values.volume1.idx.size }}
    {{- end }}
    {{- if eq .Values.volume1.logs.type "persistentVolumeClaim" }}
    - metadata:
        name: logs
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.volume1.logs.storageClass }}
        resources:
          requests:
            storage: {{ .Values.volume1.logs.size }}
    {{- end }}
      {{- end }}
{{- end }}
